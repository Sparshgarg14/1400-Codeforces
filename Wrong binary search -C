import java.io.*;
import java.util.*;




public class Codeforces {
    static final int mod = 1000000;
//The problems are easy and if I m not going anywhere with some solution, come back, think again from basic facts and logic
//    try to see if the process is good when working in reverse(reverse numbers from 1-n) and think of parity
//    even first or odd first to print
//The Problem statement




/*
find(x) is always stable if x is present in the permutation
if s[i]==1 make that p[i] stable , form such permutation
-1 otherwise
0011100
1234567
 p=[2,4,3,5,1]
 00000
 1 is not stable , from 1-5 ,any random integer chosen , other than p[5]==1, allowed numbers 1 2 3 4
 if 1 is chosen , p[1]>1 so r= m-1 ,r =0,l=1 loop is exited
 if 2 is chosen  , p[2]>4 so r= m-1 , r= 1,l=1 now m =1, not possible
 if 3 is chosen , p[3] = 3>1 so r =2, l =1 ,not possible in any
 if 4 is chosen , p[4] = 5>1, so again not possible
 if 5 is chosen , p[5] = 1 got the number
 I would want to make l>r as soon as possible that is shrink r or increase l
1 2 3 4 5
5 4 3 2 1
can I prove that is always possible to attain this if the array is sorted in reverse order ?
this can work if all zeroes are there
if all ones -then just return the sorted order of permutation
11001111
12345678
1 2 5 6 7 8 3 4
1 2 5 6 3 4 7 8
if s[i]==1 then numbers behind it must be smaller than that and the numbers after it must be greater than it
if s[0] =0 then not possible at all or s[n-1]==0 then also not possible at all


 */


//Small observations in the question
    /*
Let's consider checking if the value x
 is stable:

Let's denote the elements <x
 as −1
, =x
 as 0
 and >x
 as 1
. This turns the permutation into an array of x−1
 times of −1
s, one 0
, and the rest are 1
. For example, for permutation [3,5,1,4,2]
 and element x=4
, let the new array be [−1,1,−1,0,−1]
. It can be proved that doing binary search on element 0
 on this array is the same as doing binary search on element x
 in the permutation.
One necessary condition is that all the −1
s occur before the 0
. Otherwise, if we choose m
 as the position of −1
 at first, am<x
 will be judged, and then l
 becomes m+1
, where element x
 will be outside the range.
Similarly, all the 1
s should occur after the 0
. Otherwise, we can choose m
 as the position of that 1
 at first.
We can prove that the two conditions above are sufficient. That is because the array of −1,0,1
 is already sorted, and you can always find the correct position of 0
 on a sorted array.
In all, the condition that element x
 is stable is that: ax=x
, and ai<x
 if and only if i<x
, and ai>x
 if and only if i>x
.

Consider constructing a permutation. If si=0
, we can construct anything that does not satisfy the conditions above, such as [2,3,…,n,1],[n,n−1,n−2,…,2,1]
. Note that n
 should not be 1
.
1 2 3 4 5 

The positions that si=1
 must be filled with pi=i
. For each segment of 0
 (an interval [l,r]
 that is filled with all 0
 and l−1
 and r+1
 are either boundary or 1
), we still need to fill the values [l,r]
 into the indices pl,…,pr
. Similar as the case when all si=0
, we can simply reverse or cyclic shift the subsegment [l,r]
. There's no solution if l=r
 here.

The time complexity is O(n)

     */


//Algo that can be claimed
    /*

     */


    public static void main(String[] args) throws IOException {
        FastReader fr = new FastReader();
        int t = fr.nextInt();
        while (t-- > 0) {
         int n   = fr.nextInt();
         String s = fr.next();
         int min = Integer.MAX_VALUE;
         int res[] = new int[n+1];
         boolean check = false;
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) == '1') {
                    res[i+1] = i + 1;
                    continue;
                }
                    int j = i;
                    while (j < n && s.charAt(j) == '0') j++;
                    min = Math.min(min, j - i);
//                    System.out.println(j + " " + i );
                    if (min == 1) {
                        System.out.println("NO");
                        check  =true;
                        break;
                    }
                    else {
                        for (int k = i + 1; k < j; k++) {
                            res[k] = k + 1;
                        }
                        res[j] = i+1;
                    }
                    i =j-1;
                }

            if(check){
                continue;
            }
            System.out.println("YES");
            for (int i = 1; i < n+1; i++) {
                System.out.print(res[i] + " ");
            }
            System.out.println();
        }

    }












    public static void Swap(int i , int j ){
        int temp=0;
        i =j;

    }
    // Function to compute GCD of two numbers
    public static long gcd(long a, long b) {
        while (b != 0) {
            long temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }



    //  Binary Exponentiation (modular fast power)
    static long binPow(long a, int b) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) == 1) res = res * a % mod;
            a = a * a % mod;
            b >>= 1;
        }
        return res;
    }

    public static class Pair {
        public int a, b;
        Pair(int a, int b) {
            this.a = a;
            this.b = b;
        }
        @Override
        public String toString() {
            return a + " -> " + b;
        }
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Pair that = (Pair) o;
            return a == that.a && b == that.b;
        }
    }
}

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                String line = br.readLine();
                if (line == null) return null;
                st = new StringTokenizer(line);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    String nextLine() {
        String str = "";
        try {
            if (st.hasMoreTokens()) str = st.nextToken("\n");
            else str = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
}
