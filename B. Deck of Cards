import java.io.*;
import java.util.*;




public class Codeforces {
    static final int mod = 1000000;
//The problems are easy and if I m not going anywhere with some solution, come back, think again from basic facts and logic
//    try to see if the process is good when working in reverse(reverse numbers from 1-n) and think of parity
//    even first or odd first to print
//    try to make generalized cases - aaaa...bbbb...a a a b bb a ..a.. at the end what I need to do ultimately
//The Problem statement
 /*
cards from 1- n  sorted ascending order and n at the bottom
k actions on the deck
remove the top
remove the bottom
0- top
1- bottom
2  - anything of them
its a very easy problem , just the implementation

 */


//Small observations in the question
    /*
he wants to remove as few letters as possible , he is removing consecutive letters, wants to make equal number of a and b's
can start at any index 
    */


//Algo that can be claimed
    /*

     */


    public static void main(String[] args) throws IOException {
        FastReader fr = new FastReader();
        int t = fr.nextInt();
        while (t-- > 0) {

            int n = fr.nextInt();
            int k = fr.nextInt();
            String res = fr.next();
            List<Character> list = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                list.add('+');
            }
             if(n==1){
                 System.out.println('-');
                 continue;
             }
            int cnt0=0;
            int cnt1=0;
            int cnt2=0;
            for(char ch : res.toCharArray()){
                if(ch=='1')cnt1++;
                if(ch=='2')cnt2++;
                if(ch=='0')cnt0++;
            }
            int cntzero = cnt0;
             int cntone= cnt1;
             int cnttwo  =cnt2;
            int i =0;

            while (i<n && cnt0-->0){
                list.set(i, '-');
                i++;
            }
            i = n-1;
            while (i>=0 && cnt1-->0){
                list.set(i, '-');
                i--;
            }

            int start=0;
            int end =n-1;
            for (int j = 0; j < cntzero; j++) {
                start++;
            }
            for (int j = 0; j < cntone; j++) {
                end--;
            }
            for (int j = 0; j < cnttwo; j++) {
                   if(start< n )list.set(start,'?');
                 if(end>=0) list.set(end,'?');
                 start++;
                 end--;
            }
            if(cnttwo>=n-(cntone + cntzero)){
                List<Character>list1 = new ArrayList<>();
                for (int j = 0; j <n; j++) {
                    list1.add('-');
                }
                for(char ch:list1){
                    System.out.print(ch);
                }
            }
            else{
                for(char ch:list){
                    System.out.print(ch);
                }
            }

            System.out.println();



        }
    }












    public static void Swap(int i , int j ){
        int temp=0;
        i =j;

    }
    // Function to compute GCD of two numbers
    public static long gcd(long a, long b) {
        while (b != 0) {
            long temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }



    //  Binary Exponentiation (modular fast power)
    static long binPow(long a, int b) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) == 1) res = res * a % mod;
            a = a * a % mod;
            b >>= 1;
        }
        return res;
    }

    public static class Pair {
        public int a, b;
        Pair(int a, int b) {
            this.a = a;
            this.b = b;
        }
        @Override
        public String toString() {
            return a + " -> " + b;
        }
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Pair that = (Pair) o;
            return a == that.a && b == that.b;
        }
    }
}

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                String line = br.readLine();
                if (line == null) return null;
                st = new StringTokenizer(line);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    String nextLine() {
        String str = "";
        try {
            if (st.hasMoreTokens()) str = st.nextToken("\n");
            else str = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
}
