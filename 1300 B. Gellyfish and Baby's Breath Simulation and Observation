import java.io.*;
import java.util.*;

//The Problem statement
/*

 */
//Small observations in the question
/*
the main observation is here like I know if take the maximum power lets just say it is 2^k and even it gets paired up with 
least power component 2^0 it will give me the maximum sum as if take the second maximum 2^k-1 and again 2^k-1 the sum is 2*2^k-1 that is 2^K 
which is still less than 2^k + c (here it is 2^0)
 */
//Algo that can be claimed 
/*

 */
 
public class Codeforces {
    static final int mod = 998244353;

    public static void main(String[] args) throws IOException {
        FastReader fr = new FastReader();
        int t = fr.nextInt();

        while (t-- > 0) {
            int n = fr.nextInt();
            int[] p = new int[n];
            int[] q = new int[n];
            HashMap<Integer, Integer> mapp = new HashMap<>();
            HashMap<Integer, Integer> mapq = new HashMap<>();

            for (int i = 0; i < n; i++) {
                p[i] = fr.nextInt();
                mapp.put(p[i], i);
            }
            for (int i = 0; i < n; i++) {
                q[i] = fr.nextInt();
                mapq.put(q[i], i);
            }

            int[] resmaxp = new int[n];
            int []resmaxq  = new int[n];
            int maxp1 = -1;
            int maxq1 = -1;
            for (int i = 0; i < n; i++) {
                maxp1 = Math.max(maxp1, p[i]);
                maxq1 = Math.max(maxq1, q[i]);
                resmaxp[i] = maxp1;
                resmaxq[i] = maxq1;

            }

            int[] res = new int[n];
            long number1 =0;
            long number2=0;
            int idx1=0;
            int idx2=0;
            for (int i = 0; i < n; i++) {
               if(resmaxp[i]>resmaxq[i]){
                   number1=binPow(2,resmaxp[i]);
                   idx1  = mapp.get(resmaxp[i]);
                   idx2 = i-idx1;
                   number2 = binPow(2, q[idx2]);
               }
               if(resmaxq[i]>resmaxp[i]){
                   number1 = binPow(2,resmaxq[i]);
                   idx1  = mapq.get(resmaxq[i]);
                   idx2 = i-idx1;
                   number2 = binPow(2,p[idx2]);
               }
               if(resmaxq[i]==resmaxp[i]){
                   number1 = binPow(2,resmaxq[i]);
                    int y1 = q[i-mapp.get(resmaxp[i])];
                    int y2  = p[i-mapq.get(resmaxq[i])];
                    number2 = binPow(2,Math.max(y1,y2));

               }
               res[i] = (int)((number2 + number1)%mod);
            }

            for (int v : res) {
                System.out.print(v + " ");
            }
            System.out.println();
        }
    }

    // âœ… Binary Exponentiation (modular fast power)
    static long binPow(long a, int b) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) == 1) res = res * a % mod;
            a = a * a % mod;
            b >>= 1;
        }
        return res;
    }

    public static class Pair {
        public int a, b;
        Pair(int a, int b) {
            this.a = a;
            this.b = b;
        }
        @Override
        public String toString() {
            return a + " -> " + b;
        }
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Pair that = (Pair) o;
            return a == that.a && b == that.b;
        }
    }
}

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                String line = br.readLine();
                if (line == null) return null;
                st = new StringTokenizer(line);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    String nextLine() {
        String str = "";
        try {
            if (st.hasMoreTokens()) str = st.nextToken("\n");
            else str = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }
}
